/**
 * TinyCDP React Integration Examples
 * 
 * This file shows how to integrate TinyCDP with React applications:
 * - Provider pattern for SDK initialization
 * - Custom hooks for feature flags
 * - Component-level tracking
 * - Real-world usage scenarios
 */

import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import { initTinyCDP, TinyCDPClient } from '../packages/sdk/src/index';

// =============================================================================
// 1. REACT PROVIDER SETUP
// =============================================================================

interface TinyCDPContextType {
  client: TinyCDPClient;
  userId: string | null;
  setUserId: (userId: string | null) => void;
}

const TinyCDPContext = createContext<TinyCDPContextType | undefined>(undefined);

interface TinyCDPProviderProps {
  children: ReactNode;
  endpoint: string;
  writeKey: string;
  readKey: string;
  debug?: boolean;
}

export function TinyCDPProvider({ 
  children, 
  endpoint, 
  writeKey, 
  readKey, 
  debug = false 
}: TinyCDPProviderProps) {\n  const [client] = useState(() => initTinyCDP({\n    endpoint,\n    writeKey,\n    readKey,\n    debug,\n    flushAt: 20,\n    flushIntervalMs: 10000,\n  }));\n\n  const [userId, setUserId] = useState<string | null>(() => {\n    // Try to get user ID from localStorage or your auth system\n    return localStorage.getItem('user_id');\n  });\n\n  useEffect(() => {\n    // Save user ID to localStorage when it changes\n    if (userId) {\n      localStorage.setItem('user_id', userId);\n    } else {\n      localStorage.removeItem('user_id');\n    }\n  }, [userId]);\n\n  useEffect(() => {\n    // Cleanup when component unmounts\n    return () => {\n      client.destroy();\n    };\n  }, [client]);\n\n  const value = {\n    client,\n    userId,\n    setUserId,\n  };\n\n  return (\n    <TinyCDPContext.Provider value={value}>\n      {children}\n    </TinyCDPContext.Provider>\n  );\n}\n\n// =============================================================================\n// 2. CUSTOM HOOKS\n// =============================================================================\n\n/**\n * Hook to access TinyCDP client\n */\nexport function useTinyCDP() {\n  const context = useContext(TinyCDPContext);\n  if (context === undefined) {\n    throw new Error('useTinyCDP must be used within a TinyCDPProvider');\n  }\n  return context;\n}\n\n/**\n * Hook for feature flags with loading state\n */\nexport function useFeatureFlag(flagKey: string, defaultValue = false) {\n  const { client, userId } = useTinyCDP();\n  const [value, setValue] = useState(defaultValue);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!userId) {\n      setValue(defaultValue);\n      setLoading(false);\n      setError(null);\n      return;\n    }\n\n    async function checkFlag() {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const decision = await client.decide({ userId, flag: flagKey });\n        setValue(decision.allow);\n      } catch (err) {\n        const errorMessage = err instanceof Error ? err.message : 'Unknown error';\n        setError(errorMessage);\n        setValue(defaultValue);\n        console.error(`Feature flag error for ${flagKey}:`, err);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    checkFlag();\n  }, [client, userId, flagKey, defaultValue]);\n\n  return { value, loading, error };\n}\n\n/**\n * Hook for tracking events\n */\nexport function useTracking() {\n  const { client, userId } = useTinyCDP();\n\n  const track = React.useCallback((event: string, properties?: Record<string, any>) => {\n    if (!userId) {\n      console.warn('Cannot track event without user ID:', event);\n      return;\n    }\n\n    client.track({\n      userId,\n      event,\n      properties: {\n        ...properties,\n        page: window.location.pathname,\n        timestamp: new Date().toISOString(),\n      }\n    });\n  }, [client, userId]);\n\n  const identify = React.useCallback(async (traits: Record<string, any>) => {\n    if (!userId) {\n      console.warn('Cannot identify user without user ID');\n      return;\n    }\n\n    try {\n      await client.identify({ userId, traits });\n    } catch (error) {\n      console.error('Failed to identify user:', error);\n    }\n  }, [client, userId]);\n\n  return { track, identify };\n}\n\n/**\n * Hook for A/B testing\n */\nexport function useExperiment(experimentName: string, defaultVariant = 'control') {\n  const { client, userId } = useTinyCDP();\n  const [variant, setVariant] = useState(defaultVariant);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    if (!userId) {\n      setVariant(defaultVariant);\n      setLoading(false);\n      return;\n    }\n\n    async function getVariant() {\n      try {\n        setLoading(true);\n        \n        const decision = await client.decide({ userId, flag: experimentName });\n        const experimentVariant = decision.variant || (decision.allow ? 'treatment' : 'control');\n        \n        setVariant(experimentVariant);\n        \n        // Track experiment exposure\n        client.track({\n          userId,\n          event: 'experiment_exposure',\n          properties: {\n            experiment: experimentName,\n            variant: experimentVariant,\n          }\n        });\n        \n      } catch (error) {\n        console.error(`Experiment error for ${experimentName}:`, error);\n        setVariant(defaultVariant);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    getVariant();\n  }, [client, userId, experimentName, defaultVariant]);\n\n  return { variant, loading };\n}\n\n// =============================================================================\n// 3. COMPONENT EXAMPLES\n// =============================================================================\n\n/**\n * Feature flag conditional rendering component\n */\ninterface FeatureGateProps {\n  flag: string;\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\nexport function FeatureGate({ flag, children, fallback = null }: FeatureGateProps) {\n  const { value: enabled, loading } = useFeatureFlag(flag);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return enabled ? <>{children}</> : <>{fallback}</>;\n}\n\n/**\n * Button with automatic click tracking\n */\ninterface TrackedButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  trackingEvent?: string;\n  trackingProperties?: Record<string, any>;\n  children: ReactNode;\n}\n\nexport function TrackedButton({ \n  trackingEvent = 'button_clicked', \n  trackingProperties = {}, \n  children, \n  onClick, \n  ...props \n}: TrackedButtonProps) {\n  const { track } = useTracking();\n\n  const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    // Track the click\n    track(trackingEvent, {\n      ...trackingProperties,\n      button_text: typeof children === 'string' ? children : 'button',\n    });\n\n    // Call original onClick if provided\n    if (onClick) {\n      onClick(e);\n    }\n  };\n\n  return (\n    <button {...props} onClick={handleClick}>\n      {children}\n    </button>\n  );\n}\n\n/**\n * Component that tracks page views\n */\nexport function PageTracker({ page }: { page: string }) {\n  const { track } = useTracking();\n\n  useEffect(() => {\n    track('page_view', { page });\n  }, [track, page]);\n\n  return null;\n}\n\n/**\n * A/B test variant component\n */\ninterface ExperimentVariantProps {\n  experiment: string;\n  variant: string;\n  children: ReactNode;\n}\n\nexport function ExperimentVariant({ experiment, variant, children }: ExperimentVariantProps) {\n  const { variant: currentVariant, loading } = useExperiment(experiment);\n\n  if (loading) {\n    return null;\n  }\n\n  return currentVariant === variant ? <>{children}</> : null;\n}\n\n// =============================================================================\n// 4. REAL-WORLD USAGE EXAMPLES\n// =============================================================================\n\n/**\n * Main App component with TinyCDP integration\n */\nfunction App() {\n  return (\n    <TinyCDPProvider\n      endpoint=\"https://staging-tinycdp-s3b2.encr.app\"\n      writeKey=\"9X32xyFBpzfVe8kXChVcrYzD3BvMUTVq\"\n      readKey=\"ux0X8YZcKEkKn2MhHRDlN1gRX7EYJ97c\"\n      debug={process.env.NODE_ENV === 'development'}\n    >\n      <Router>\n        <Routes>\n          <Route path=\"/\" element={<HomePage />} />\n          <Route path=\"/dashboard\" element={<DashboardPage />} />\n          <Route path=\"/pricing\" element={<PricingPage />} />\n        </Routes>\n      </Router>\n    </TinyCDPProvider>\n  );\n}\n\n/**\n * Home page with feature flags and tracking\n */\nfunction HomePage() {\n  const { track } = useTracking();\n\n  useEffect(() => {\n    track('page_view', { page: 'home' });\n  }, [track]);\n\n  return (\n    <div>\n      <PageTracker page=\"home\" />\n      \n      <h1>Welcome to Our App</h1>\n      \n      {/* Show premium banner only to eligible users */}\n      <FeatureGate flag=\"premium_banner\">\n        <div className=\"premium-banner\">\n          ðŸŒŸ Upgrade to Premium for exclusive features!\n        </div>\n      </FeatureGate>\n      \n      {/* A/B test different call-to-action buttons */}\n      <ExperimentVariant experiment=\"cta_experiment\" variant=\"treatment\">\n        <TrackedButton \n          trackingEvent=\"cta_clicked\"\n          trackingProperties={{ variant: 'treatment' }}\n          className=\"btn-primary\"\n        >\n          Start Your Free Trial\n        </TrackedButton>\n      </ExperimentVariant>\n      \n      <ExperimentVariant experiment=\"cta_experiment\" variant=\"control\">\n        <TrackedButton \n          trackingEvent=\"cta_clicked\"\n          trackingProperties={{ variant: 'control' }}\n          className=\"btn-secondary\"\n        >\n          Get Started\n        </TrackedButton>\n      </ExperimentVariant>\n    </div>\n  );\n}\n\n/**\n * Dashboard with user-specific features\n */\nfunction DashboardPage() {\n  const { userId, setUserId } = useTinyCDP();\n  const { track, identify } = useTracking();\n  const { value: showAdvancedFeatures } = useFeatureFlag('advanced_dashboard');\n\n  useEffect(() => {\n    if (!userId) {\n      // Redirect to login or set a demo user\n      setUserId('demo-user-' + Date.now());\n    }\n  }, [userId, setUserId]);\n\n  useEffect(() => {\n    if (userId) {\n      track('dashboard_viewed');\n      \n      // Update user traits\n      identify({\n        last_dashboard_visit: new Date().toISOString(),\n        dashboard_version: 'v2.1',\n      });\n    }\n  }, [userId, track, identify]);\n\n  if (!userId) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <PageTracker page=\"dashboard\" />\n      \n      <h1>Dashboard</h1>\n      \n      <div className=\"dashboard-content\">\n        <div className=\"basic-features\">\n          <h2>Your Stats</h2>\n          {/* Basic dashboard content */}\n        </div>\n        \n        {/* Show advanced features only to eligible users */}\n        {showAdvancedFeatures && (\n          <div className=\"advanced-features\">\n            <h2>Advanced Analytics</h2>\n            <TrackedButton \n              trackingEvent=\"advanced_feature_used\"\n              trackingProperties={{ feature: 'analytics_export' }}\n            >\n              Export Analytics\n            </TrackedButton>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n/**\n * Pricing page with personalized offers\n */\nfunction PricingPage() {\n  const { track } = useTracking();\n  const { value: showDiscount, loading } = useFeatureFlag('pricing_discount');\n\n  useEffect(() => {\n    track('pricing_viewed');\n  }, [track]);\n\n  if (loading) {\n    return <div>Loading pricing...</div>;\n  }\n\n  return (\n    <div>\n      <PageTracker page=\"pricing\" />\n      \n      <h1>Choose Your Plan</h1>\n      \n      {showDiscount && (\n        <div className=\"discount-banner\">\n          ðŸŽ‰ Special offer: 20% off your first month!\n        </div>\n      )}\n      \n      <div className=\"pricing-plans\">\n        <div className=\"plan\">\n          <h3>Basic Plan</h3>\n          <p>$9/month</p>\n          <TrackedButton \n            trackingEvent=\"plan_selected\"\n            trackingProperties={{ plan: 'basic', has_discount: showDiscount }}\n          >\n            Choose Basic\n          </TrackedButton>\n        </div>\n        \n        <div className=\"plan\">\n          <h3>Premium Plan</h3>\n          <p>$19/month</p>\n          <TrackedButton \n            trackingEvent=\"plan_selected\"\n            trackingProperties={{ plan: 'premium', has_discount: showDiscount }}\n          >\n            Choose Premium\n          </TrackedButton>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport {\n  App,\n  HomePage,\n  DashboardPage,\n  PricingPage,\n};
